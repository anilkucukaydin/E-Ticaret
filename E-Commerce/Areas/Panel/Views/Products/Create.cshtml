@using E_Commerce.Models
@model Product
@{
    /**/

    ViewBag.Title = "Create";
}
<link href="~/Content/jQuery-File-Upload-9.28.0/css/jquery.fileupload.css" rel="stylesheet" />
<h2>Create Product</h2>
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @Html.ValidationSummary()
    </div>
}
<form method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label>Kategoriler</label>
        <select name="CategoryIds" class="form-control">
            <option value="">Seçiniz</option>
            @foreach (Category item in ViewBag.Categories)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label>Ürün Adı</label>
        <input name="Name" class="form-control" />
    </div>
    <div class="form-group">
        <label>Renk</label>
        <input name="Color" class="form-control" />
    </div>
    <div class="form-group">
        <label>Fiyat</label>
        <input type="number" name="Price" class="form-control" />
    </div>
    <div class="form-group">
        <label>Beden</label>
        <select id="Size" class="form-control" name="sizes">
            <option value="">Seçiniz</option>
            @{
                var sizeoptions = Enum.GetValues(typeof(Size));
            }
            @foreach (var item in sizeoptions)
            {
                <option value="@Array.IndexOf(sizeoptions,item)">@item</option>}
        </select>

    </div>
    <div class="form-group">
        <label>Ürün Adeti</label>
        <input type="number" name="ProductQuantity" class="form-control" />
    </div>
    <div class="form-group">
        <label>Ürün Özellikleri</label>
        <p style="font-size:10px;">Lütfen ürün bilgilerini giriniz.</p>
        <textarea name="Description" class="form-control" rows="5"></textarea>
    </div>

    <div class="form-group">
        <span class="btn btn-success fileinput-button">
            <i class="glyphicon glyphicon-plus"></i>
            <span>Resimleri Seçiniz</span>
            <input id="fileupload" type="file" name="productImage" multiple />
        </span>
    </div>
    <button class="btn btn-success">Kaydet</button>

    <div id="progress" class="progress">
        <div class="progress-bar progress-bar-success"></div>
    </div>
    <div id="files" class="files"></div>
</form>

<script src="~/Content/jQuery-File-Upload-9.28.0/js/vendor/jquery.ui.widget.js"></script>

<!-- The Load Image plugin is included for the preview images and image resizing functionality -->
<script src="https://blueimp.github.io/JavaScript-Load-Image/js/load-image.all.min.js"></script>
<!-- The Canvas to Blob plugin is included for image resizing functionality -->
<script src="https://blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>



<!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
<script src="~/Content/jQuery-File-Upload-9.28.0/js/jquery.iframe-transport.js"></script>
<!-- The basic File Upload plugin -->
<script src="~/Content/jQuery-File-Upload-9.28.0/js/jquery.fileupload.js"></script>
<!-- The File Upload processing plugin -->
<script src="~/Content/jQuery-File-Upload-9.28.0/js/jquery.fileupload-process.js"></script>
<!-- The File Upload image preview & resize plugin -->
<script src="~/Content/jQuery-File-Upload-9.28.0/js/jquery.fileupload-image.js"></script>
<!-- The File Upload audio preview plugin -->
<script src="~/Content/jQuery-File-Upload-9.28.0/js/jquery.fileupload-audio.js"></script>
<!-- The File Upload video preview plugin -->
<script src="~/Content/jQuery-File-Upload-9.28.0/js/jquery.fileupload-video.js"></script>
<!-- The File Upload validation plugin -->
<script src="~/Content/jQuery-File-Upload-9.28.0/js/jquery.fileupload-validate.js"></script>



<script>
    /*jslint unparam: true, regexp: true */
    /*global window, $ */
    $(function () {
        'use strict';
        // Change this to the location of your server-side upload handler:
        var url = "/Uploads/Product/",
            uploadButton = $('<button/>')
                .addClass('btn btn-primary')
                .prop('disabled', true)
                .text('Processing...')
                .on('click', function () {
                    var $this = $(this),
                        data = $this.data();
                    $this
                        .off('click')
                        .text('Abort')
                        .on('click', function () {
                            $this.remove();
                            data.abort();
                        });
                    data.submit().always(function () {
                        $this.remove();
                    });
                });
        $('#fileupload').fileupload({
            url: url,
            dataType: 'json',
            autoUpload: true,
            acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
            maxFileSize: 999000,
            // Enable image resizing, except for Android and Opera,
            // which actually support image resizing, but fail to
            // send Blob objects via XHR requests:
            disableImageResize: /Android(?!.*Chrome)|Opera/
                .test(window.navigator.userAgent),
            previewMaxWidth: 100,
            previewMaxHeight: 100,
            previewCrop: true
        }).on('fileuploadadd', function (e, data) {
            data.context = $('<div/>').appendTo('#files');
            $.each(data.files, function (index, file) {
                var node = $('<p/>')
                    .append($('<span/>').text(file.name));
                if (!index) {
                    node
                        .append('<br>')
                        .append(uploadButton.clone(true).data(data));
                }
                node.appendTo(data.context);
            });
        }).on('fileuploadprocessalways', function (e, data) {
            var index = data.index,
                file = data.files[index],
                node = $(data.context.children()[index]);
            if (file.preview) {
                node
                    .prepend('<br>')
                    .prepend(file.preview);
            }
            if (file.error) {
                node
                    .append('<br>')
                    .append($('<span class="text-danger"/>').text(file.error));
            }
            if (index + 1 === data.files.length) {
                data.context.find('button')
                    .text('Upload')
                    .remove();
                    //.prop('disabled', !!data.files.error);
            }
        }).on('fileuploadprogressall', function (e, data) {
            var progress = parseInt(data.loaded / data.total * 100, 10);
            $('#progress .progress-bar').css(
                'width',
                progress + '%'
            );
        }).on('fileuploaddone', function (e, data) {
            $.each(data.result.files, function (index, file) {
                if (file.url) {
                    var link = $('<a>')
                        .attr('target', '_blank')
                        .prop('href', file.url);
                    $(data.context.children()[index])
                        .wrap(link);
                } else if (file.error) {
                    var error = $('<span class="text-danger"/>').text(file.error);
                    $(data.context.children()[index])
                        .append('<br>')
                        .append(error);
                }
            });
        }).on('fileuploadfail', function (e, data) {
            $.each(data.files, function (index) {
                var error = $('<span class="text-danger"/>').text('File upload failed.');
                $(data.context.children()[index])
                    .append('<br>')
                    .append(error);
            });
        }).prop('disabled', !$.support.fileInput)
            .parent().addClass($.support.fileInput ? undefined : 'disabled');
    });
</script>
